" Some config came from: http://vim.wikia.com/wiki/Example_vimrc
"
" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

set tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab

runtime macros/matchit.vim

" Enable syntax highlighting
syntax on

" Swap file setup to a custom directory
set noswapfile

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Removes trailing spaces automatically
autocmd BufWritePre :%s/\s\+$//e

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" " dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" Display line numbers on the left
set number

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" ~/.vim/colors/molokai
colorscheme molokai 


" Vundle setup
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'mustache/vim-mustache-handlebars'

" vim-spec setup
Plugin 'thoughtbot/vim-rspec'

" FZF setup
Plugin 'junegunn/fzf'

" Vim surround 
Plugin 'tpope/vim-surround'

" Rails plugins
Plugin 'tpope/vim-rails'

" Commentaries
Plugin 'tpope/vim-commentary'

" Searching
Plugin 'rking/ag.vim'

Plugin 'godlygeek/tabular'

" Whitespace colorizing
Plugin 'ntpeters/vim-better-whitespace'

" Vim highlightning
Plugin 'airblade/vim-gitgutter'

" git integration
Plugin 'tpope/vim-fugitive'

" JS syntax highlightining and indentation improvements
Plugin 'pangloss/vim-javascript'

Plugin 'scrooloose/nerdtree'

Plugin 'elzr/vim-json'

Plugin 'vim-ruby/vim-ruby'

Plugin 'geekjuice/vim-mocha'

call vundle#end()

" Using vim-json
au! BufRead,BufNewFile *.json set filetype=json

set rtp+=~/.fzf
nnoremap <c-p> :FZF<cr>

" Map vimrc editing / saving
nmap <leader>vr :sp $MYVIMRC<cr>
map <leader>T: :Tabularize /:\zs<cr>
nmap <leader>so :source $MYVIMRC<cr>


" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

let g:rspec_command = "!spring rspec --drb {spec}"

" File deleting maps
nnoremap rm :call delete(expand('%')) \| bdelete!<CR>

" Edit the db/schema.rb Rails file in a split
nmap <leader>sc :split db/schema.rb<cr>

" Tabs configurations
" "------------------------

for tab_number in [1,2,3,4, 5, 6]
  execute 'map <silent> <C-w>' . tab_number . ' :tabnext ' . tab_number . '<cr>'
endfor

nnoremap <leader>wn :tabnew<cr>

" Ruby configurations
"------------------------

"Ruby is new, and sometimes funtimes
au BufRead,BufNewFile Vagrantfile, Gemfile, Guardfile set filetype=ruby
au BufRead,BufNewFile Gemfile set filetype=ruby
au BufRead,BufNewFile Guardfile set filetype=ruby
au FileType ruby setl sw=2 sts=2 ts=2 tw=80 " Two spaces per tab

" Set .erb html files
au FileType ebury setl setl sw=2 sts=2 ts=2 " Two spaces per tab

" Delete trailing white space when saving
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

au BufWrite * :call DeleteTrailingWS()

highlight ExtraWhitespace ctermbg=red

set runtimepath^=~/.vim/bundle/ag

function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

" Renaming file
map <leader>n :call RenameFile()<cr>
au BufReadPost *.hbs set filetype=html.mustache syntax=html.mustache
